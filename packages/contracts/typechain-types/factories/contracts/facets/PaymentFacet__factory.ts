/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PaymentFacet,
  PaymentFacetInterface,
} from "../../../contracts/facets/PaymentFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "nameOfPayment",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "PaymentDoneWithCicleo",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "treasuryAccount",
        type: "address",
      },
    ],
    name: "PaymentManagerCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "getRouterSwap",
    outputs: [
      {
        internalType: "contract IRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "nameOfPayment",
        type: "string",
      },
    ],
    name: "payWithCicleo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "nameOfPayment",
        type: "string",
      },
      {
        internalType: "contract IOpenOceanCaller",
        name: "executor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "srcToken",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "dstToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "srcReceiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "dstReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minReturnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guaranteedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
        ],
        internalType: "struct SwapDescription",
        name: "desc",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "target",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IOpenOceanCaller.CallDescription[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "payWithCicleoWithSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRouter",
        name: "routerSwap",
        type: "address",
      },
    ],
    name: "setRouterSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611d95806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ebe49d146100515780634281ba6f1461006d57806370a86d851461008b578063f2517fb2146100a7575b600080fd5b61006b60048036038101906100669190611128565b6100c3565b005b61007561047b565b6040516100829190611655565b60405180910390f35b6100a560048036038101906100a0919061105a565b6104b3565b005b6100c160048036038101906100bc91906110b4565b61050e565b005b60006100ce89610616565b9050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161415610144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013b906116d0565b60405180910390fd5b6101573385600001518660800151610790565b600061016161047b565b9050846000015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38287608001516040518363ffffffff1660e01b81526004016101a69291906115e5565b602060405180830381600087803b1580156101c057600080fd5b505af11580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f8919061102d565b506000856020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102389190611593565b60206040518083038186803b15801561025057600080fd5b505afa158015610264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102889190611087565b90508173ffffffffffffffffffffffffffffffffffffffff166390411a32888888886040518563ffffffff1660e01b81526004016102c9949392919061160e565b602060405180830381600087803b1580156102e357600080fd5b505af11580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b9190611087565b506000866020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161035b9190611593565b60206040518083038186803b15801561037357600080fd5b505afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab9190611087565b90508a82826103ba9190611944565b10156103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f290611690565b60405180910390fd5b898960405161040b92919061157a565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff168d7f2f5f2ee5aa57a7095e4d595ee43379ebe9db86f64a35c08ec2b2f345564c52c785856104589190611944565b60405161046591906116f0565b60405180910390a4505050505050505050505050565b600080610486610989565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6104bb6109b6565b60006104c5610989565b9050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600061051985610616565b9050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16141561058f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610586906116d0565b60405180910390fd5b61059e33826020015186610790565b6105a88585610a51565b82826040516105b892919061157a565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff16867f2f5f2ee5aa57a7095e4d595ee43379ebe9db86f64a35c08ec2b2f345564c52c78760405161060791906116f0565b60405180910390a45050505050565b61061e610d1f565b6000610628610c3a565b90508060000160008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461070690611aa4565b80601f016020809104026020016040519081016040528092919081815260200182805461073290611aa4565b801561077f5780601f106107545761010080835404028352916020019161077f565b820191906000526020600020905b81548152906001019060200180831161076257829003601f168201915b505050505081525050915050919050565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107cb9190611593565b60206040518083038186803b1580156107e357600080fd5b505afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611087565b90508273ffffffffffffffffffffffffffffffffffffffff166323b872dd8530856040518463ffffffff1660e01b815260040161085a939291906115ae565b602060405180830381600087803b15801561087457600080fd5b505af1158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac919061102d565b5081816108b99190611863565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108f29190611593565b60206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190611087565b1015610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a906116b0565b60405180910390fd5b50505050565b6000807fb614cc20afefd276f60a08638fc53c1ea3092f7f93df945b3977c828850a40ef90508091505090565b6109be610c67565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4690611670565b60405180910390fd5b565b6000610a5c83610616565b9050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161415610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac9906116d0565b60405180910390fd5b60006103e8610adf610c94565b61ffff1684610aee91906118ea565b610af891906118b9565b9050816020015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600001518386610b2b9190611944565b6040518363ffffffff1660e01b8152600401610b489291906115e5565b602060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a919061102d565b50816020015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610bc3610cba565b836040518363ffffffff1660e01b8152600401610be19291906115e5565b602060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c33919061102d565b5050505050565b6000807fd99b573b44155c1da097fb84c2f030c9f8daa830c708ef6625b3e30f7ba2234e90508091505090565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b600080610c9f610cf2565b90508060010160149054906101000a900461ffff1691505090565b600080610cc5610cf2565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807fd8f6e013ff0cbc66ded25851d52c18673042e44ec585aeabfa2e9126bad1f74e90508091505090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000610d7f610d7a84611730565b61170b565b905082815260208101848484011115610d9b57610d9a611be6565b5b610da6848285611a62565b509392505050565b600081359050610dbd81611cd5565b92915050565b60008083601f840112610dd957610dd8611bcd565b5b8235905067ffffffffffffffff811115610df657610df5611bc8565b5b602083019150836020820283011115610e1257610e11611be1565b5b9250929050565b600081519050610e2881611cec565b92915050565b600082601f830112610e4357610e42611bcd565b5b8135610e53848260208601610d6c565b91505092915050565b600081359050610e6b81611d03565b92915050565b600081359050610e8081611d1a565b92915050565b600081359050610e9581611d31565b92915050565b60008083601f840112610eb157610eb0611bcd565b5b8235905067ffffffffffffffff811115610ece57610ecd611bc8565b5b602083019150836001820283011115610eea57610ee9611be1565b5b9250929050565b60006101408284031215610f0857610f07611bd2565b5b610f1361014061170b565b90506000610f2384828501610e5c565b6000830152506020610f3784828501610e5c565b6020830152506040610f4b84828501610dae565b6040830152506060610f5f84828501610dae565b6060830152506080610f7384828501611003565b60808301525060a0610f8784828501611003565b60a08301525060c0610f9b84828501611003565b60c08301525060e0610faf84828501611003565b60e083015250610100610fc484828501610dae565b6101008301525061012082013567ffffffffffffffff811115610fea57610fe9611bdc565b5b610ff684828501610e2e565b6101208301525092915050565b60008135905061101281611d48565b92915050565b60008151905061102781611d48565b92915050565b60006020828403121561104357611042611bf5565b5b600061105184828501610e19565b91505092915050565b6000602082840312156110705761106f611bf5565b5b600061107e84828501610e86565b91505092915050565b60006020828403121561109d5761109c611bf5565b5b60006110ab84828501611018565b91505092915050565b600080600080606085870312156110ce576110cd611bf5565b5b60006110dc87828801611003565b94505060206110ed87828801611003565b935050604085013567ffffffffffffffff81111561110e5761110d611beb565b5b61111a87828801610e9b565b925092505092959194509250565b60008060008060008060008060c0898b03121561114857611147611bf5565b5b60006111568b828c01611003565b98505060206111678b828c01611003565b975050604089013567ffffffffffffffff81111561118857611187611beb565b5b6111948b828c01610e9b565b965096505060606111a78b828c01610e71565b945050608089013567ffffffffffffffff8111156111c8576111c7611beb565b5b6111d48b828c01610ef1565b93505060a089013567ffffffffffffffff8111156111f5576111f4611beb565b5b6112018b828c01610dc3565b92509250509295985092959890939650565b600061121f83836113fd565b905092915050565b61123081611978565b82525050565b61123f81611978565b82525050565b60006112518385611783565b93508360208402850161126384611761565b8060005b878110156112a757848403895261127e8284611824565b6112888582611213565b945061129383611776565b925060208a01995050600181019050611267565b50829750879450505050509392505050565b60006112c58385611794565b93506112d2838584611a62565b6112db83611bfa565b840190509392505050565b60006112f18261176b565b6112fb8185611794565b935061130b818560208601611a71565b61131481611bfa565b840191505092915050565b611328816119f6565b82525050565b61133781611a1a565b82525050565b61134681611a3e565b82525050565b600061135883856117b6565b9350611365838584611a62565b82840190509392505050565b600061137e6022836117a5565b915061138982611c0b565b604082019050919050565b60006113a1600b836117a5565b91506113ac82611c5a565b602082019050919050565b60006113c4600f836117a5565b91506113cf82611c83565b602082019050919050565b60006113e7600f836117a5565b91506113f282611cac565b602082019050919050565b600060808301611410600084018461184c565b61141d600086018261155c565b5061142b602084018461184c565b611438602086018261155c565b50611446604084018461184c565b611453604086018261155c565b5061146160608401846117c1565b85830360608701526114748382846112b9565b925050508091505092915050565b60006101408301600083015161149b600086018261131f565b5060208301516114ae602086018261131f565b5060408301516114c16040860182611227565b5060608301516114d46060860182611227565b5060808301516114e7608086018261155c565b5060a08301516114fa60a086018261155c565b5060c083015161150d60c086018261155c565b5060e083015161152060e086018261155c565b50610100830151611535610100860182611227565b5061012083015184820361012086015261154f82826112e6565b9150508091505092915050565b611565816119ec565b82525050565b611574816119ec565b82525050565b600061158782848661134c565b91508190509392505050565b60006020820190506115a86000830184611236565b92915050565b60006060820190506115c36000830186611236565b6115d06020830185611236565b6115dd604083018461156b565b949350505050565b60006040820190506115fa6000830185611236565b611607602083018461156b565b9392505050565b6000606082019050611623600083018761132e565b81810360208301526116358186611482565b9050818103604083015261164a818486611245565b905095945050505050565b600060208201905061166a600083018461133d565b92915050565b6000602082019050818103600083015261168981611371565b9050919050565b600060208201905081810360008301526116a981611394565b9050919050565b600060208201905081810360008301526116c9816113b7565b9050919050565b600060208201905081810360008301526116e9816113da565b9050919050565b6000602082019050611705600083018461156b565b92915050565b6000611715611726565b90506117218282611ad6565b919050565b6000604051905090565b600067ffffffffffffffff82111561174b5761174a611b94565b5b61175482611bfa565b9050602081019050919050565b6000819050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600080833560016020038436030381126117de576117dd611bf0565b5b83810192508235915060208301925067ffffffffffffffff82111561180657611805611bc3565b5b60018202360384131561181c5761181b611bd7565b5b509250929050565b6000823560016080038336030381126118405761183f611bf0565b5b82810191505092915050565b600061185b6020840184611003565b905092915050565b600061186e826119ec565b9150611879836119ec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118ae576118ad611b07565b5b828201905092915050565b60006118c4826119ec565b91506118cf836119ec565b9250826118df576118de611b36565b5b828204905092915050565b60006118f5826119ec565b9150611900836119ec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561193957611938611b07565b5b828202905092915050565b600061194f826119ec565b915061195a836119ec565b92508282101561196d5761196c611b07565b5b828203905092915050565b6000611983826119cc565b9050919050565b60008115159050919050565b60006119a182611978565b9050919050565b60006119b382611978565b9050919050565b60006119c582611978565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611a0182611a08565b9050919050565b6000611a13826119cc565b9050919050565b6000611a2582611a2c565b9050919050565b6000611a37826119cc565b9050919050565b6000611a4982611a50565b9050919050565b6000611a5b826119cc565b9050919050565b82818337600083830152505050565b60005b83811015611a8f578082015181840152602081019050611a74565b83811115611a9e576000848401525b50505050565b60006002820490506001821680611abc57607f821691505b60208210811415611ad057611acf611b65565b5b50919050565b611adf82611bfa565b810181811067ffffffffffffffff82111715611afe57611afd611b94565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f53776170206661696c6564000000000000000000000000000000000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f496e76616c696420737562696e666f0000000000000000000000000000000000600082015250565b611cde81611978565b8114611ce957600080fd5b50565b611cf58161198a565b8114611d0057600080fd5b50565b611d0c81611996565b8114611d1757600080fd5b50565b611d23816119a8565b8114611d2e57600080fd5b50565b611d3a816119ba565b8114611d4557600080fd5b50565b611d51816119ec565b8114611d5c57600080fd5b5056fea26469706673582212205e9b533276545527877a2683824d07aa47243c325e7afde6ff1401bc53b434bf64736f6c63430008060033";

type PaymentFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PaymentFacet__factory extends ContractFactory {
  constructor(...args: PaymentFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PaymentFacet> {
    return super.deploy(overrides || {}) as Promise<PaymentFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PaymentFacet {
    return super.attach(address) as PaymentFacet;
  }
  override connect(signer: Signer): PaymentFacet__factory {
    return super.connect(signer) as PaymentFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentFacetInterface {
    return new utils.Interface(_abi) as PaymentFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PaymentFacet {
    return new Contract(address, _abi, signerOrProvider) as PaymentFacet;
  }
}
